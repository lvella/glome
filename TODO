== Needs for FIKALAB game ==

- Game menu with scoreboard:
    - Take care to make it compatible with VR UI
- Handle headset input: (Helder)
  - Headset orientation changes camera view relative to ship position
- Figure VR inputs
  - Study the possibilities
  - EVA movement-like maybe?
  - 2 hand canons, maybe?
    - laser targetting
    - each cannon position given by each controller position
- Fix supernova appearence when camere is inside it
  - May happen when flying very close to it
  - Draw something crazy and transparent so to make it obvious
    the viewer is inside supernova, even if the ship isn't.
  - Draw something as the background if looking to the interior of supernova
- Sound effects:
  - Shot
  - Hit
  - Engine fire
  - Flying spagetti monster
  - Splash into supernova
  - others?
- Fix destroyer's double flame positions (Lucas)
- Figure a way to neatly integrate players, VR, and world creation
  - May involve refactoring game initialization a bit
- Change ship design to fit VR
- Devise some UI that works better in VR
- CI
  - Install dependencies from somewhere.
    - Maybe Conan? I don't think there are any other realistic alternatives
      - Create Conan recipe for SDL2?
  - Linux must still use system packages
- Restore minimap drawing of projectile.
- Transfer momentum on collision between objects (ships, flying spagetti monsters) (Rui)
  - At least prevent them from intersecting, change their velocity away from one another
  - How to fit that to current crazy FSM movement?
- Update audio in parallel with drawing
- Display on map only the volume unconsumed by supernova
- Visual cue of cannon heat
  - Maybe remove cannon heat stuff?
- Reuse VBO from monster in fragment

== GENERAL IMPROVEMENTS (low priority) ==

- Generalize inter/intra collision stuff in octree.
  - Prevent projectile from testing against itself.
- Revert OpenGL version to 3.2
  - OpenGL 3.3 is a requirement of glText, but I doubt it won't work on 3.2
    - Port glText to 3.2
- Properly setup and use VertexArrays (VAO) for each object type
  - Possibly right after shader setup
- Use glDrawElementsInstanced to draw projectile
  - Apparently has to use Uniform Buffer Object:
    https://www.khronos.org/opengl/wiki/Uniform_Buffer_Object
- Bring exporter up to date with current blender
- Export meshes with CMake
- Bring code to C++11:
  - Always use "override"
  - Remove all new/delete
- Make dustfield independent of FPS
  - Reuse camera history code
- Port to Vulkan (maybe we can use it to improve performance)

== OLD GLOME TODO (do not apply for FIKALAB) ==

- Visual effect of cannon fire when shooting

Main topics:
- Physics
- Special effects
- Multiplayer
- Improve ship file format and exporter
- To model more ships

Visual:
- Make the colors of the shots random and moving

Optimization:
- There are lots of unecessary allocations/deallocations, including in
camera history (STL containers). Remove them.

Game Mechanics:
- Add a shield that is depleted when shot
- Add a bar that measures cannons heat, so fire rate is slower when hot,
and halt when too hot;

Menu:

- Create options to configure.
- Stash options and load them at startup.
- Enhance ugly guichan buttons.
